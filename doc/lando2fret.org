Conversion from Lando to FRET:

* Purpose

  * Converts a Lando specification into FRET JSON for import into the FRET tool.

    FRET operates from a set of internal databases, so any shared or VCS
    operations need to be based on external files that are imported when shares
    update.  FRET importing completely replaces any previous existence of Project
    with the new, imported version.  The external files should be amenable to
    concurrent development and VCS changes (e.g. not native JSON).

    Lando provides a good basis for providing these specifications; this document
    provides the details and controls for extracting explicit FRET from the more
    permissive Lando.

* Syntax

  * The top-level system or subsystem will be the FRET Project
  * A Lando ~requirement~ with an ~index~ of FRET specifies a FRET Requirement in
    FRETish that will be extracted.
  * The abbrevName or first word of the ~requirement~ name will be used as the
    FRET requirement ID.
  * The current subsystem will be the parent for a FRET Requirement
  * The explanation of the ~requirement~ will be used as the FRET justification
    text.
  * Fret variables are indicated by a ~component~, where the variable name is
    the abbrevName or first word of the name.
    * Usage :: The use of variable is specified by a constraint ~FRET <USAGE>
      var.~ where ~USAGE~ is one of: ~Input~, ~Output~, ~Mode~, ~Function~,
      ~Internal~.
    * Type :: The type of the variable is specified by a constraint ~FRET :
      <TYPE>.~ where supported FRET data types are: ~boolean~, ~integer~,
      ~unsigned integer~, ~single~, ~double~.
  * A ~scenarios~ whose name is the same as a ~component~ followed by " Values"
    will create an automatic FRET Requirement constraining the types for that
    variable, where the type must accomodate the number of scenarios and the
    scenario numbering is an ordinal order starting from 0/false.
    * Each scenario name is a (one-word) value that is possible for that scenario
      variable.
    * Scenarios are assumed to be mutually exclusive and therefore good ways to
      describe a state machine.
    * Scenario value references in FRET ~scope~ and ~condition~ specifications
      will be update to reference equality in the scenario variable (unless
      already mentioned); scenario value references in the FRET ~timing~ and
      ~response~ specifications will be updated to reference quality in the
      ~..._final~ scenario variable.
  * An ~events~ specification can also be used to define variables.  In this
    case, the ~events~ name is ignored, and each (one-word) event listed becomes
    a boolean variable independently defined.  The lando-to-fret conversion
    process does not expect any implicit or explicit relationship between
    different event values with an ~events~ specification.
