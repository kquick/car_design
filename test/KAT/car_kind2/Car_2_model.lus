--Historically: X has always been true (so-far).
-- As soon as X is false once, Y will be false forever
-- (falling edge)
node H(X:bool) returns (Y:bool);
let
    Y = X -> (X and (pre Y));
tel


-- Timed Historically: general case
-- True if X has been true, and for R ticks afterwards, false thereafter
-- Always true for at least R ticks of the timeline, even if X is never true
-- L is ignored
node HT( L: int;  R: int; X: bool) returns (Y: bool);
let
  Y = not OT(L, R, not X);
tel


--Timed Once: general case
-- True R ticks after each X first true until L ticks after X is last true
node OT( L: int;  R: int; X: bool) returns (Y: bool);
var  D:bool;
let
  D=delay(X, R);
  Y=OTlore(L-R, D);
tel


node delay(X:bool;  R:int) returns(Y:bool);
var X1, X2, X3, X4, X5, X6, X7, X8, X9, X10 : bool;
let
  Y = if (R=0) then X
      else (if (R=1) then X1
      else (if (R=2) then X2
      else (if (R=3) then X3
      else (if (R=4) then X4
      else (if (R=5) then X5
      else (if (R=6) then X6
      else (if (R=7) then X7
      else (if (R=8) then X8
      else (if (R=9) then X9
      else (if (R=10) then X10
      else false (* n.b. only handles R <= 10 *)
      ))))))))));
  X1 = false -> pre X;
  X2 = false -> pre X1;
  X3 = false -> pre X2;
  X4 = false -> pre X3;
  X5 = false -> pre X4;
  X6 = false -> pre X5;
  X7 = false -> pre X6;
  X8 = false -> pre X7;
  X9 = false -> pre X8;
  X10 = false -> pre X9;
tel


--Timed Once: less than or equal to N
--  True every X and for N ticks afterward
node OTlore( N: int; X: bool) returns (Y: bool);
    var C:int;
let
    C = if X then 0
        else (-1 -> pre C + (if pre C <0 then 0 else 1));

    Y = 0 <= C and C <= N;
tel


-- The equivalent of LTL Y in Lustre.
--   Initially false, then the previous value of X (false, delay X by one)
node YtoPre(X: bool) returns (Y:bool);
let
  Y = false -> pre X;
tel


-- The equivalent of LTL Z in Lustre.
--   Initially true, then the previous value of X (true, delay X by one)
node ZtoPre(X: bool) returns (Y:bool);
let
  Y = true -> pre X;
tel



type starter_state__T = enum { Started, Starting, Off };
type alarm__T = enum { alarm_disabled, alarm_enabled };

----------------------------------------------------------------------
contract Car_2Spec( starter_state : starter_state__T;
                    alarm : alarm__T;
                    alarm_button : bool )
returns ( alarm__NXT : alarm__T );
let
  
  
  (* Req: upon ((alarm = alarm_enabled) & persisted(2, alarm_button)) the Car shall immediately satisfy (alarm__NXT = alarm_disabled). *)

  var ALRM_4 : bool = H(((((alarm = alarm_enabled) and (HT(2, 0, alarm_button) and HT(1, 0, YtoPre(true)))) and ZtoPre((not ((alarm = alarm_enabled) and (HT(2, 0, alarm_button) and HT(1, 0, YtoPre(true))))))) => (alarm__NXT = alarm_disabled)));


  (* Req: upon ((alarm = alarm_disabled) & (alarm_button & (starter_state = Off))) the Car shall immediately satisfy (alarm__NXT = alarm_enabled). *)

  var ALRM_1 : bool = H(((((alarm = alarm_disabled) and (alarm_button and (starter_state = Off))) and ZtoPre((not ((alarm = alarm_disabled) and (alarm_button and (starter_state = Off)))))) => (alarm__NXT = alarm_enabled)));


  guarantee "ALRM-4" ALRM_4;
  guarantee "ALRM-1" ALRM_1;
  
  mode alarm__NXT_alarm_disabled ( require alarm__NXT = alarm_disabled; );
  mode alarm__NXT_alarm_enabled ( require alarm__NXT = alarm_enabled; );
tel

----------------------------------------------------------------------
node Car_2 ( starter_state : starter_state__T;
                    alarm : alarm__T;
                    alarm_button : bool )
returns ( alarm__NXT : alarm__T );
  (*@contract
     import Car_2Spec(starter_state, alarm, alarm_button)
            returns (alarm__NXT);
  *)
let
  --%MAIN;
    alarm__NXT = alarm_system(alarm, alarm_button, starter_state);
tel

node alarm_system (alarm : alarm__T;
                   alarm_button: bool;
                   starter_state: starter_state__T)
returns (alarm__NXT : alarm__T);
var btn_pre : bool;
var btn_pre_pre : bool;
let
  btn_pre = false -> pre alarm_button;
  btn_pre_pre = false -> pre btn_pre;
  alarm__NXT =
    if alarm_button and (alarm = alarm_disabled) and (starter_state = Off)
    then alarm_enabled
    else
      if (alarm = alarm_enabled) and btn_pre and btn_pre_pre
      then alarm_disabled
      else alarm;
tel
  
