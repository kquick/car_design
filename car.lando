subsystem Car
This is a Car.

contains

  // ----------------------------------------------------------------------
  subsystem Starter
  This is the electronics and motor used to start the engine of the car
  and prepare it for driving.

  scenarios starter_state Values

      Started // there can be operational states uninteresting to the Starter
      The car is started.

      Starting
      The car is being started by the Starter.

      // Shutting_down
      // The car is currently shutting down.  It is assumed that there is
      // a process for this and that it does not occur instantly.

      Off
      Engine and Starter and all other Car components are off.

  // ------------------------------------------------------------
  // System triggers

  events Console operational triggers

      start_button
      The button pushed to start or stop the car.

      braking
      The brakes are applied.

  component speed
    The Car could be moving.

      FRET Input var.
      FRET : integer.

  component brake_lights
    Indicators that the car is braking.

    FRET Output var.
    FRET : boolean.

  // ------------------------------------------------------------
  // Starter requirements.
  //
  // All general requirements are at the top level and reference the "Car"
  // itself: FRET variables are associated with individual FRET components and
  // cannot refer to states/events in other components; we may wish to evaluate
  // the holistic functionality of several subsystems working together, thus the
  // reference to "Car" rather than the individual subsystem.

  requirement Start
    The car can be started by pressing the start button.

    indexing
      source: IGN.1 from requirements.txt
      source: C-Req-1 from requirements.txt
      FRET: upon start_button & Off the Car shall immediately satisfy Starting.
      Note: Sometimes the car's lights are lit during the starting process. This
            next fretish statement can be enabled to showcase a requirements
            realizability problem.
      _FRET: upon Starting the Car shall immediately satisfy brake_lights.

  requirement Shutdown
    The car can be turned off if it is on and not moving by pressing the start
    button for 3 seconds.

    indexing
      source: IGN.2 from requirements.txt
      source: C-Req-2 from requirements.txt
      FRET: upon (!Off) & (speed = 0) & persisted(2, start_button)
            the Car shall immediately satisfy Off.

  // ----------------------------------------------------------------------
  // Braking requirements

  requirement Braking
    The brake lights will indicate when the car is braking.

    indexing
      FRET: upon braking the Car shall immediately satisfy brake_lights.
      FRET: upon persisted(1, !braking)
            the Car shall immediately
            satisfy !brake_lights.


  // ----------------------------------------------------------------------
  subsystem Alarm
  This is a component that reacts to attempts to steal the car by emitting
  a loud noise and disabling the car.  The car should remain disabled until
  the authorized user resets the alarm.

  scenarios alarm Values

      alarm_disabled
      The Alarm is disabled and will not generate an alarm even if a trigger
      event occurs.

      alarm_enabled
      The Alarm is enabled but not indicating an alarm state.

      // alarm_warning
      // The Alarm is giving an initial warning but is not yet going off.

      // alarm_alarming
      // The Alarm is indicating an alarm condition via sounds, lights, and
      // other means.

      // alarm_halting_car
      // This is the state where the Alarm is active (sounding) and is in the
      // process of halting the other Car systems.

      // alarm_hold // g?
      // The Alarm was active and halted the Car.  The Alarm is holding the Car
      // in the halted state due to the Alarm action.

  // ------------------------------------------------------------
  // System triggers

  events Alarm-related triggers

      alarm_button
      User button pressed to control the state of the Alarm.

      // enable_alarm
      // Trigger to enable the Alarm.

      // disable_alarm
      // Trigger to disable the Alarm such that it does not generate alarms.

      // reset_alarm
      // The alarm has been reset by an authorized action.

      trigger_alarm
      The trigger for the Alarm.  If true, this means that trouble is afoot
      and the Alarm should be sounded.

  // ----------------------------------------------------------------------
  // Alarm requirements.  An Alarm is available on the Luxury version of the car.

  requirement (Luxury) ALRM-1
    The alarm can be turned on by pressing the alarm button.

    indexing
      source: ALRM-1 in requirements.txt
      source: ALRM-2 in requirements.txt
      FRET: upon alarm_disabled & alarm_button
            & Off // ALRM-2
            the Car shall immediately satisfy alarm_enabled.

  requirement (Luxury) Turn alarm off (ALRM-4)
    The alarm can be shutoff by holding the alarm button for 3
    seconds as long as it has not been triggered.

    indexing
      FRET: upon alarm_enabled & persisted(2, alarm_button)
            the Car shall immediately satisfy alarm_disabled.

end
