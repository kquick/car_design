{
  "requirements": [
    {
      "_id":"Car-req-7",
      "comments":"",
      "fulltext":"upon (start_button & (starter_state = Off)) the Car shall immediately satisfy (starter_state__NXT = Starting).",
      "parent_reqid":"",
      "project":"Car",
      "rationale":"The car can be started by pressing the start button.",
      "reqid":"Start",
      "semantics": {
	"CoCoSpecCode":"H((((start_button and (starter_state = Off)) and ZtoPre((not (start_button and (starter_state = Off))))) => (starter_state__NXT = Starting)))",
	"component":"Car",
	"componentTextRange": [44, 50 ],
	"component_name":"Car",
	"condition":"regular",
	"conditionTextRange": [0, 42 ],
	"description":"ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(start_button & (starter_state = Off))<\/i><\/b> is true and any point in the interval where <b><i>(start_button & (starter_state = Off))<\/i><\/b> becomes true (from false).\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
	"diagramVariables":"TC = <b><i>(start_button & (starter_state = Off))<\/i><\/b>, Response = <b><i>(starter_state__NXT = Starting)<\/i><\/b>",
	"ft":"((LAST V (((! (start_button & (starter_state = Off))) & ((! LAST) & (X (start_button & (starter_state = Off))))) -> (X (starter_state__NXT = Starting)))) & ((start_button & (starter_state = Off)) -> (starter_state__NXT = Starting)))",
	"ftExpanded":"((LAST V (((! (start_button & (starter_state = Off))) & ((! LAST) & (X (start_button & (starter_state = Off))))) -> (X (starter_state__NXT = Starting)))) & ((start_button & (starter_state = Off)) -> (starter_state__NXT = Starting)))",
	"ftExpandedUnoptimized":"((LAST V (((! (start_button & (starter_state = Off))) & ((! LAST) & (X (start_button & (starter_state = Off))))) -> (X (starter_state__NXT = Starting)))) & ((start_button & (starter_state = Off)) -> (starter_state__NXT = Starting)))",
	"ftExpanded_fetched":"((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X $post_condition_SMV_ft$))) & ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$))",
	"ftInfAUExpanded":"((G (((! (start_button & (starter_state = Off))) & (X (start_button & (starter_state = Off)))) -> (X (starter_state__NXT = Starting)))) & ((start_button & (starter_state = Off)) -> (starter_state__NXT = Starting)))",
	"ftInfAUExpanded_fetched":"((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X $post_condition_SMV_ft$))) & ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$))",
	"ft_fetched":"((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X $post_condition_unexp_ft$))) & ($regular_condition_unexp_ft$ -> $post_condition_unexp_ft$))",
	"post_condition":"(starter_state__NXT = Starting)",
	"post_condition_SMV_ft":"(starter_state__NXT = Starting)",
	"post_condition_SMV_pt":"(starter_state__NXT = Starting)",
	"post_condition_unexp_ft":"(starter_state__NXT = Starting)",
	"post_condition_unexp_pt":"(starter_state__NXT = Starting)",
	"pre_condition":"(start_button & (starter_state = Off))",
	"pt":"(H (((start_button & (starter_state = Off)) & (Z (! (start_button & (starter_state = Off))))) -> (starter_state__NXT = Starting)))",
	"ptExpanded":"(H (((start_button & (starter_state = Off)) & (Z (! (start_button & (starter_state = Off))))) -> (starter_state__NXT = Starting)))",
	"ptExpanded_fetched":"(H (($regular_condition_SMV_pt$ & (Z (! $regular_condition_SMV_pt$))) -> $post_condition_SMV_pt$))",
	"pt_fetched":"(H (($regular_condition_unexp_pt$ & (Z (! $regular_condition_unexp_pt$))) -> $post_condition_unexp_pt$))",
	"qualifier_word":"upon",
	"regular_condition":"(start_button & (starter_state = Off))",
	"regular_condition_SMV_ft":"(start_button & (starter_state = Off))",
	"regular_condition_SMV_pt":"(start_button & (starter_state = Off))",
	"regular_condition_unexp_ft":"(start_button & (starter_state = Off))",
	"regular_condition_unexp_pt":"(start_button & (starter_state = Off))",
	"response":"satisfaction",
	"responseTextRange": [70, 108 ],
	"scope": {"type":null},
	"scope_mode_ft":"BAD_FT",
	"scope_mode_pt":"BAD_PT",
	"timing":"immediately",
	"timingTextRange": [58, 68 ],
	"type":"nasa",
	"variables": [
	  "start_button",
	  "starter_state",
	  "Off",
	  "starter_state__NXT",
	  "Starting"
	]
      },
      "status":""
    },
    {
      "_id":"Car-req-8",
      "comments":"",
      "fulltext":"upon ((! (starter_state = Off)) & ((speed = 0) & persisted(2, start_button))) the Car shall immediately satisfy (starter_state__NXT = Off).",
      "parent_reqid":"",
      "project":"Car",
      "rationale":"The car can be turned off if it is on and not moving by pressing the start button for 3 seconds.",
      "reqid":"Shutdown",
      "semantics": {
	"CoCoSpecCode":"H(((((not (starter_state = Off)) and ((speed = 0) and (HT(2, 0, start_button) and HT((2 - 1), 0, (not ZtoPre(false)))))) and ZtoPre((not ((not (starter_state = Off)) and ((speed = 0) and (HT(2, 0, start_button) and HT((2 - 1), 0, (not ZtoPre(false))))))))) => (starter_state__NXT = Off)))",
	"component":"Car",
	"componentTextRange": [78, 84 ],
	"component_name":"Car",
	"condition":"regular",
	"conditionTextRange": [0, 76 ],
	"description":"ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>((! (starter_state = Off)) & ((speed = 0) & persisted(2, start_button)))<\/i><\/b> is true and any point in the interval where <b><i>((! (starter_state = Off)) & ((speed = 0) & persisted(2, start_button)))<\/i><\/b> becomes true (from false).\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
	"diagramVariables":"TC = <b><i>((! (starter_state = Off)) & ((speed = 0) & persisted(2, start_button)))<\/i><\/b>, Response = <b><i>(starter_state__NXT = Off)<\/i><\/b>",
	"ft":"((LAST V (((! ((! (starter_state = Off)) & ((speed = 0) & (FALSE & (FALSE & (FALSE & FALSE)))))) & ((! LAST) & (X ((! (starter_state = Off)) & ((speed = 0) & (FALSE & (FALSE & (FALSE & FALSE)))))))) -> (X (starter_state__NXT = Off)))) & (((! (starter_state = Off)) & ((speed = 0) & (FALSE & (FALSE & (FALSE & FALSE))))) -> (starter_state__NXT = Off)))",
	"ftExpanded":"((LAST V (((! ((! (starter_state = Off)) & ((speed = 0) & (FALSE & (FALSE & (FALSE & FALSE)))))) & ((! LAST) & (X ((! (starter_state = Off)) & ((speed = 0) & (FALSE & (FALSE & (FALSE & FALSE)))))))) -> (X (starter_state__NXT = Off)))) & (((! (starter_state = Off)) & ((speed = 0) & (FALSE & (FALSE & (FALSE & FALSE))))) -> (starter_state__NXT = Off)))",
	"ftExpandedUnoptimized":"((LAST V (((! ((! (starter_state = Off)) & ((speed = 0) & (FALSE & (FALSE & (FALSE & FALSE)))))) & ((! LAST) & (X ((! (starter_state = Off)) & ((speed = 0) & (FALSE & (FALSE & (FALSE & FALSE)))))))) -> (X (starter_state__NXT = Off)))) & (((! (starter_state = Off)) & ((speed = 0) & (FALSE & (FALSE & (FALSE & FALSE))))) -> (starter_state__NXT = Off)))",
	"ftExpanded_fetched":"((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X $post_condition_SMV_ft$))) & ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$))",
	"ftInfAUExpanded":"((G (((! ((! (starter_state = Off)) & ((speed = 0) & (FALSE & (FALSE & (FALSE & FALSE)))))) & (X ((! (starter_state = Off)) & ((speed = 0) & (FALSE & (FALSE & (FALSE & FALSE))))))) -> (X (starter_state__NXT = Off)))) & (((! (starter_state = Off)) & ((speed = 0) & (FALSE & (FALSE & (FALSE & FALSE))))) -> (starter_state__NXT = Off)))",
	"ftInfAUExpanded_fetched":"((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X $post_condition_SMV_ft$))) & ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$))",
	"ft_fetched":"((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X $post_condition_unexp_ft$))) & ($regular_condition_unexp_ft$ -> $post_condition_unexp_ft$))",
	"post_condition":"(starter_state__NXT = Off)",
	"post_condition_SMV_ft":"(starter_state__NXT = Off)",
	"post_condition_SMV_pt":"(starter_state__NXT = Off)",
	"post_condition_unexp_ft":"(starter_state__NXT = Off)",
	"post_condition_unexp_pt":"(starter_state__NXT = Off)",
	"pre_condition":"((! (starter_state = Off)) & ((speed = 0) & persisted(2, start_button)))",
	"pt":"(H ((((! (starter_state = Off)) & ((speed = 0) & ((H[<=2] start_button) & (H[<2] (! FTP))))) & (Z (! ((! (starter_state = Off)) & ((speed = 0) & ((H[<=2] start_button) & (H[<2] (! FTP)))))))) -> (starter_state__NXT = Off)))",
	"ptExpanded":"(H ((((! (starter_state = Off)) & ((speed = 0) & ((H[<=2] start_button) & (H[<2] (! (Z FALSE)))))) & (Z (! ((! (starter_state = Off)) & ((speed = 0) & ((H[<=2] start_button) & (H[<2] (! (Z FALSE))))))))) -> (starter_state__NXT = Off)))",
	"ptExpanded_fetched":"(H (($regular_condition_SMV_pt$ & (Z (! $regular_condition_SMV_pt$))) -> $post_condition_SMV_pt$))",
	"pt_fetched":"(H (($regular_condition_unexp_pt$ & (Z (! $regular_condition_unexp_pt$))) -> $post_condition_unexp_pt$))",
	"qualifier_word":"upon",
	"regular_condition":"((! (starter_state = Off)) & ((speed = 0) & persisted(2, start_button)))",
	"regular_condition_SMV_ft":"((! (starter_state = Off)) & ((speed = 0) & (FALSE & (FALSE & (FALSE & FALSE)))))",
	"regular_condition_SMV_pt":"((! (starter_state = Off)) & ((speed = 0) & ((H[<=2] start_button) & (H[<2] (! (Z FALSE))))))",
	"regular_condition_unexp_ft":"((! (starter_state = Off)) & ((speed = 0) & (FALSE & (FALSE & (FALSE & FALSE)))))",
	"regular_condition_unexp_pt":"((! (starter_state = Off)) & ((speed = 0) & ((H[<=2] start_button) & (H[<2] (! FTP)))))",
	"response":"satisfaction",
	"responseTextRange": [104, 137 ],
	"scope": {"type":null},
	"scope_mode_ft":"BAD_FT",
	"scope_mode_pt":"BAD_PT",
	"timing":"immediately",
	"timingTextRange": [92, 102 ],
	"type":"nasa",
	"variables": [
	  "starter_state",
	  "Off",
	  "speed",
	  "start_button",
	  "starter_state__NXT"
	]
      },
      "status":""
    },
    {
      "_id":"Car-req-9",
      "comments":"",
      "fulltext":"upon braking the Car shall immediately satisfy brake_lights.",
      "parent_reqid":"",
      "project":"Car",
      "rationale":"The brake lights will indicate when the car is braking.",
      "reqid":"Braking",
      "semantics": {
	"CoCoSpecCode":"H(((braking and ZtoPre((not braking))) => brake_lights))",
	"component":"Car",
	"componentTextRange": [13, 19 ],
	"component_name":"Car",
	"condition":"regular",
	"conditionTextRange": [0, 11 ],
	"description":"ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>braking<\/i><\/b> is true and any point in the interval where <b><i>braking<\/i><\/b> becomes true (from false).\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
	"diagramVariables":"TC = <b><i>braking<\/i><\/b>, Response = <b><i>brake_lights<\/i><\/b>",
	"ft":"((LAST V (((! braking) & ((! LAST) & (X braking))) -> (X brake_lights))) & (braking -> brake_lights))",
	"ftExpanded":"((LAST V (((! braking) & ((! LAST) & (X braking))) -> (X brake_lights))) & (braking -> brake_lights))",
	"ftExpandedUnoptimized":"((LAST V (((! braking) & ((! LAST) & (X braking))) -> (X brake_lights))) & (braking -> brake_lights))",
	"ftExpanded_fetched":"((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X $post_condition_SMV_ft$))) & ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$))",
	"ftInfAUExpanded":"((G (((! braking) & (X braking)) -> (X brake_lights))) & (braking -> brake_lights))",
	"ftInfAUExpanded_fetched":"((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X $post_condition_SMV_ft$))) & ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$))",
	"ft_fetched":"((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X $post_condition_unexp_ft$))) & ($regular_condition_unexp_ft$ -> $post_condition_unexp_ft$))",
	"post_condition":"brake_lights",
	"post_condition_SMV_ft":"brake_lights",
	"post_condition_SMV_pt":"brake_lights",
	"post_condition_unexp_ft":"brake_lights",
	"post_condition_unexp_pt":"brake_lights",
	"pre_condition":"braking",
	"pt":"(H ((braking & (Z (! braking))) -> brake_lights))",
	"ptExpanded":"(H ((braking & (Z (! braking))) -> brake_lights))",
	"ptExpanded_fetched":"(H (($regular_condition_SMV_pt$ & (Z (! $regular_condition_SMV_pt$))) -> $post_condition_SMV_pt$))",
	"pt_fetched":"(H (($regular_condition_unexp_pt$ & (Z (! $regular_condition_unexp_pt$))) -> $post_condition_unexp_pt$))",
	"qualifier_word":"upon",
	"regular_condition":"braking",
	"regular_condition_SMV_ft":"braking",
	"regular_condition_SMV_pt":"braking",
	"regular_condition_unexp_ft":"braking",
	"regular_condition_unexp_pt":"braking",
	"response":"satisfaction",
	"responseTextRange": [39, 58 ],
	"scope": {"type":null},
	"scope_mode_ft":"BAD_FT",
	"scope_mode_pt":"BAD_PT",
	"timing":"immediately",
	"timingTextRange": [27, 37 ],
	"type":"nasa",
	"variables": ["braking", "brake_lights" ]
      },
      "status":""
    },
    {
      "_id":"Car-req-9-1",
      "comments":"",
      "fulltext":"upon persisted(1, (! braking)) the Car shall immediately satisfy (! brake_lights).",
      "parent_reqid":"Car-req-9",
      "project":"Car",
      "rationale":"The brake lights will indicate when the car is braking.",
      "reqid":"Braking-1",
      "semantics": {
	"CoCoSpecCode":"H((((HT(1, 0, (not braking)) and HT((1 - 1), 0, (not ZtoPre(false)))) and ZtoPre((not (HT(1, 0, (not braking)) and HT((1 - 1), 0, (not ZtoPre(false))))))) => (not brake_lights)))",
	"component":"Car",
	"componentTextRange": [31, 37 ],
	"component_name":"Car",
	"condition":"regular",
	"conditionTextRange": [0, 29 ],
	"description":"ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>persisted(1, (! braking))<\/i><\/b> is true and any point in the interval where <b><i>persisted(1, (! braking))<\/i><\/b> becomes true (from false).\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
	"diagramVariables":"TC = <b><i>persisted(1, (! braking))<\/i><\/b>, Response = <b><i>(! brake_lights)<\/i><\/b>",
	"ft":"((LAST V (((! (FALSE & (FALSE & (FALSE & FALSE)))) & ((! LAST) & (X (FALSE & (FALSE & (FALSE & FALSE)))))) -> (X (! brake_lights)))) & ((FALSE & (FALSE & (FALSE & FALSE))) -> (! brake_lights)))",
	"ftExpanded":"((LAST V (((! (FALSE & (FALSE & (FALSE & FALSE)))) & ((! LAST) & (X (FALSE & (FALSE & (FALSE & FALSE)))))) -> (X (! brake_lights)))) & ((FALSE & (FALSE & (FALSE & FALSE))) -> (! brake_lights)))",
	"ftExpandedUnoptimized":"((LAST V (((! (FALSE & (FALSE & (FALSE & FALSE)))) & ((! LAST) & (X (FALSE & (FALSE & (FALSE & FALSE)))))) -> (X (! brake_lights)))) & ((FALSE & (FALSE & (FALSE & FALSE))) -> (! brake_lights)))",
	"ftExpanded_fetched":"((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X $post_condition_SMV_ft$))) & ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$))",
	"ftInfAUExpanded":"((G (((! (FALSE & (FALSE & (FALSE & FALSE)))) & (X (FALSE & (FALSE & (FALSE & FALSE))))) -> (X (! brake_lights)))) & ((FALSE & (FALSE & (FALSE & FALSE))) -> (! brake_lights)))",
	"ftInfAUExpanded_fetched":"((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X $post_condition_SMV_ft$))) & ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$))",
	"ft_fetched":"((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X $post_condition_unexp_ft$))) & ($regular_condition_unexp_ft$ -> $post_condition_unexp_ft$))",
	"post_condition":"(! brake_lights)",
	"post_condition_SMV_ft":"(! brake_lights)",
	"post_condition_SMV_pt":"(! brake_lights)",
	"post_condition_unexp_ft":"(! brake_lights)",
	"post_condition_unexp_pt":"(! brake_lights)",
	"pre_condition":"persisted(1, (! braking))",
	"pt":"(H ((((H[<=1] (! braking)) & (H[<1] (! FTP))) & (Z (! ((H[<=1] (! braking)) & (H[<1] (! FTP)))))) -> (! brake_lights)))",
	"ptExpanded":"(H ((((H[<=1] (! braking)) & (H[<1] (! (Z FALSE)))) & (Z (! ((H[<=1] (! braking)) & (H[<1] (! (Z FALSE))))))) -> (! brake_lights)))",
	"ptExpanded_fetched":"(H (($regular_condition_SMV_pt$ & (Z (! $regular_condition_SMV_pt$))) -> $post_condition_SMV_pt$))",
	"pt_fetched":"(H (($regular_condition_unexp_pt$ & (Z (! $regular_condition_unexp_pt$))) -> $post_condition_unexp_pt$))",
	"qualifier_word":"upon",
	"regular_condition":"persisted(1, (! braking))",
	"regular_condition_SMV_ft":"(FALSE & (FALSE & (FALSE & FALSE)))",
	"regular_condition_SMV_pt":"((H[<=1] (! braking)) & (H[<1] (! (Z FALSE))))",
	"regular_condition_unexp_ft":"(FALSE & (FALSE & (FALSE & FALSE)))",
	"regular_condition_unexp_pt":"((H[<=1] (! braking)) & (H[<1] (! FTP)))",
	"response":"satisfaction",
	"responseTextRange": [57, 80 ],
	"scope": {"type":null},
	"scope_mode_ft":"BAD_FT",
	"scope_mode_pt":"BAD_PT",
	"timing":"immediately",
	"timingTextRange": [45, 55 ],
	"type":"nasa",
	"variables": ["braking", "brake_lights" ]
      },
      "status":""
    },
    {
      "_id":"Car-req-13",
      "comments":"",
      "fulltext":"upon ((alarm = alarm_disabled) & (alarm_button & (starter_state = Off))) the Car shall immediately satisfy (alarm__NXT = alarm_enabled).",
      "parent_reqid":"",
      "project":"Car",
      "rationale":"The alarm can be turned on by pressing the alarm button.",
      "reqid":"ALRM-1",
      "semantics": {
	"CoCoSpecCode":"H(((((alarm = alarm_disabled) and (alarm_button and (starter_state = Off))) and ZtoPre((not ((alarm = alarm_disabled) and (alarm_button and (starter_state = Off)))))) => (alarm__NXT = alarm_enabled)))",
	"component":"Car",
	"componentTextRange": [73, 79 ],
	"component_name":"Car",
	"condition":"regular",
	"conditionTextRange": [0, 71 ],
	"description":"ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>((alarm = alarm_disabled) & (alarm_button & (starter_state = Off)))<\/i><\/b> is true and any point in the interval where <b><i>((alarm = alarm_disabled) & (alarm_button & (starter_state = Off)))<\/i><\/b> becomes true (from false).\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
	"diagramVariables":"TC = <b><i>((alarm = alarm_disabled) & (alarm_button & (starter_state = Off)))<\/i><\/b>, Response = <b><i>(alarm__NXT = alarm_enabled)<\/i><\/b>",
	"ft":"((LAST V (((! ((alarm = alarm_disabled) & (alarm_button & (starter_state = Off)))) & ((! LAST) & (X ((alarm = alarm_disabled) & (alarm_button & (starter_state = Off)))))) -> (X (alarm__NXT = alarm_enabled)))) & (((alarm = alarm_disabled) & (alarm_button & (starter_state = Off))) -> (alarm__NXT = alarm_enabled)))",
	"ftExpanded":"((LAST V (((! ((alarm = alarm_disabled) & (alarm_button & (starter_state = Off)))) & ((! LAST) & (X ((alarm = alarm_disabled) & (alarm_button & (starter_state = Off)))))) -> (X (alarm__NXT = alarm_enabled)))) & (((alarm = alarm_disabled) & (alarm_button & (starter_state = Off))) -> (alarm__NXT = alarm_enabled)))",
	"ftExpandedUnoptimized":"((LAST V (((! ((alarm = alarm_disabled) & (alarm_button & (starter_state = Off)))) & ((! LAST) & (X ((alarm = alarm_disabled) & (alarm_button & (starter_state = Off)))))) -> (X (alarm__NXT = alarm_enabled)))) & (((alarm = alarm_disabled) & (alarm_button & (starter_state = Off))) -> (alarm__NXT = alarm_enabled)))",
	"ftExpanded_fetched":"((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X $post_condition_SMV_ft$))) & ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$))",
	"ftInfAUExpanded":"((G (((! ((alarm = alarm_disabled) & (alarm_button & (starter_state = Off)))) & (X ((alarm = alarm_disabled) & (alarm_button & (starter_state = Off))))) -> (X (alarm__NXT = alarm_enabled)))) & (((alarm = alarm_disabled) & (alarm_button & (starter_state = Off))) -> (alarm__NXT = alarm_enabled)))",
	"ftInfAUExpanded_fetched":"((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X $post_condition_SMV_ft$))) & ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$))",
	"ft_fetched":"((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X $post_condition_unexp_ft$))) & ($regular_condition_unexp_ft$ -> $post_condition_unexp_ft$))",
	"post_condition":"(alarm__NXT = alarm_enabled)",
	"post_condition_SMV_ft":"(alarm__NXT = alarm_enabled)",
	"post_condition_SMV_pt":"(alarm__NXT = alarm_enabled)",
	"post_condition_unexp_ft":"(alarm__NXT = alarm_enabled)",
	"post_condition_unexp_pt":"(alarm__NXT = alarm_enabled)",
	"pre_condition":"((alarm = alarm_disabled) & (alarm_button & (starter_state = Off)))",
	"pt":"(H ((((alarm = alarm_disabled) & (alarm_button & (starter_state = Off))) & (Z (! ((alarm = alarm_disabled) & (alarm_button & (starter_state = Off)))))) -> (alarm__NXT = alarm_enabled)))",
	"ptExpanded":"(H ((((alarm = alarm_disabled) & (alarm_button & (starter_state = Off))) & (Z (! ((alarm = alarm_disabled) & (alarm_button & (starter_state = Off)))))) -> (alarm__NXT = alarm_enabled)))",
	"ptExpanded_fetched":"(H (($regular_condition_SMV_pt$ & (Z (! $regular_condition_SMV_pt$))) -> $post_condition_SMV_pt$))",
	"pt_fetched":"(H (($regular_condition_unexp_pt$ & (Z (! $regular_condition_unexp_pt$))) -> $post_condition_unexp_pt$))",
	"qualifier_word":"upon",
	"regular_condition":"((alarm = alarm_disabled) & (alarm_button & (starter_state = Off)))",
	"regular_condition_SMV_ft":"((alarm = alarm_disabled) & (alarm_button & (starter_state = Off)))",
	"regular_condition_SMV_pt":"((alarm = alarm_disabled) & (alarm_button & (starter_state = Off)))",
	"regular_condition_unexp_ft":"((alarm = alarm_disabled) & (alarm_button & (starter_state = Off)))",
	"regular_condition_unexp_pt":"((alarm = alarm_disabled) & (alarm_button & (starter_state = Off)))",
	"response":"satisfaction",
	"responseTextRange": [99, 134 ],
	"scope": {"type":null},
	"scope_mode_ft":"BAD_FT",
	"scope_mode_pt":"BAD_PT",
	"timing":"immediately",
	"timingTextRange": [87, 97 ],
	"type":"nasa",
	"variables": [
	  "alarm",
	  "alarm_disabled",
	  "alarm_button",
	  "starter_state",
	  "Off",
	  "alarm__NXT",
	  "alarm_enabled"
	]
      },
      "status":""
    },
    {
      "_id":"Car-req-14",
      "comments":"",
      "fulltext":"upon ((alarm = alarm_enabled) & persisted(2, alarm_button)) the Car shall immediately satisfy (alarm__NXT = alarm_disabled).",
      "parent_reqid":"",
      "project":"Car",
      "rationale":"The alarm can be shutoff by holding the alarm button for 3 seconds as long as it has not been triggered.",
      "reqid":"ALRM-4",
      "semantics": {
	"CoCoSpecCode":"H(((((alarm = alarm_enabled) and (HT(2, 0, alarm_button) and HT((2 - 1), 0, (not ZtoPre(false))))) and ZtoPre((not ((alarm = alarm_enabled) and (HT(2, 0, alarm_button) and HT((2 - 1), 0, (not ZtoPre(false)))))))) => (alarm__NXT = alarm_disabled)))",
	"component":"Car",
	"componentTextRange": [60, 66 ],
	"component_name":"Car",
	"condition":"regular",
	"conditionTextRange": [0, 58 ],
	"description":"ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>((alarm = alarm_enabled) & persisted(2, alarm_button))<\/i><\/b> is true and any point in the interval where <b><i>((alarm = alarm_enabled) & persisted(2, alarm_button))<\/i><\/b> becomes true (from false).\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
	"diagramVariables":"TC = <b><i>((alarm = alarm_enabled) & persisted(2, alarm_button))<\/i><\/b>, Response = <b><i>(alarm__NXT = alarm_disabled)<\/i><\/b>",
	"ft":"((LAST V (((! ((alarm = alarm_enabled) & (FALSE & (FALSE & (FALSE & FALSE))))) & ((! LAST) & (X ((alarm = alarm_enabled) & (FALSE & (FALSE & (FALSE & FALSE))))))) -> (X (alarm__NXT = alarm_disabled)))) & (((alarm = alarm_enabled) & (FALSE & (FALSE & (FALSE & FALSE)))) -> (alarm__NXT = alarm_disabled)))",
	"ftExpanded":"((LAST V (((! ((alarm = alarm_enabled) & (FALSE & (FALSE & (FALSE & FALSE))))) & ((! LAST) & (X ((alarm = alarm_enabled) & (FALSE & (FALSE & (FALSE & FALSE))))))) -> (X (alarm__NXT = alarm_disabled)))) & (((alarm = alarm_enabled) & (FALSE & (FALSE & (FALSE & FALSE)))) -> (alarm__NXT = alarm_disabled)))",
	"ftExpandedUnoptimized":"((LAST V (((! ((alarm = alarm_enabled) & (FALSE & (FALSE & (FALSE & FALSE))))) & ((! LAST) & (X ((alarm = alarm_enabled) & (FALSE & (FALSE & (FALSE & FALSE))))))) -> (X (alarm__NXT = alarm_disabled)))) & (((alarm = alarm_enabled) & (FALSE & (FALSE & (FALSE & FALSE)))) -> (alarm__NXT = alarm_disabled)))",
	"ftExpanded_fetched":"((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X $post_condition_SMV_ft$))) & ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$))",
	"ftInfAUExpanded":"((G (((! ((alarm = alarm_enabled) & (FALSE & (FALSE & (FALSE & FALSE))))) & (X ((alarm = alarm_enabled) & (FALSE & (FALSE & (FALSE & FALSE)))))) -> (X (alarm__NXT = alarm_disabled)))) & (((alarm = alarm_enabled) & (FALSE & (FALSE & (FALSE & FALSE)))) -> (alarm__NXT = alarm_disabled)))",
	"ftInfAUExpanded_fetched":"((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X $post_condition_SMV_ft$))) & ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$))",
	"ft_fetched":"((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X $post_condition_unexp_ft$))) & ($regular_condition_unexp_ft$ -> $post_condition_unexp_ft$))",
	"post_condition":"(alarm__NXT = alarm_disabled)",
	"post_condition_SMV_ft":"(alarm__NXT = alarm_disabled)",
	"post_condition_SMV_pt":"(alarm__NXT = alarm_disabled)",
	"post_condition_unexp_ft":"(alarm__NXT = alarm_disabled)",
	"post_condition_unexp_pt":"(alarm__NXT = alarm_disabled)",
	"pre_condition":"((alarm = alarm_enabled) & persisted(2, alarm_button))",
	"pt":"(H ((((alarm = alarm_enabled) & ((H[<=2] alarm_button) & (H[<2] (! FTP)))) & (Z (! ((alarm = alarm_enabled) & ((H[<=2] alarm_button) & (H[<2] (! FTP))))))) -> (alarm__NXT = alarm_disabled)))",
	"ptExpanded":"(H ((((alarm = alarm_enabled) & ((H[<=2] alarm_button) & (H[<2] (! (Z FALSE))))) & (Z (! ((alarm = alarm_enabled) & ((H[<=2] alarm_button) & (H[<2] (! (Z FALSE)))))))) -> (alarm__NXT = alarm_disabled)))",
	"ptExpanded_fetched":"(H (($regular_condition_SMV_pt$ & (Z (! $regular_condition_SMV_pt$))) -> $post_condition_SMV_pt$))",
	"pt_fetched":"(H (($regular_condition_unexp_pt$ & (Z (! $regular_condition_unexp_pt$))) -> $post_condition_unexp_pt$))",
	"qualifier_word":"upon",
	"regular_condition":"((alarm = alarm_enabled) & persisted(2, alarm_button))",
	"regular_condition_SMV_ft":"((alarm = alarm_enabled) & (FALSE & (FALSE & (FALSE & FALSE))))",
	"regular_condition_SMV_pt":"((alarm = alarm_enabled) & ((H[<=2] alarm_button) & (H[<2] (! (Z FALSE)))))",
	"regular_condition_unexp_ft":"((alarm = alarm_enabled) & (FALSE & (FALSE & (FALSE & FALSE))))",
	"regular_condition_unexp_pt":"((alarm = alarm_enabled) & ((H[<=2] alarm_button) & (H[<2] (! FTP))))",
	"response":"satisfaction",
	"responseTextRange": [86, 122 ],
	"scope": {"type":null},
	"scope_mode_ft":"BAD_FT",
	"scope_mode_pt":"BAD_PT",
	"timing":"immediately",
	"timingTextRange": [74, 84 ],
	"type":"nasa",
	"variables": [
	  "alarm",
	  "alarm_enabled",
	  "alarm_button",
	  "alarm__NXT",
	  "alarm_disabled"
	]
      },
      "status":""
    }
  ],
  "variables": [
    {
      "_id":"CarCaralarm_enabled",
      "assignment":"(1)",
      "completed":true,
      "component_name":"Car",
      "copilotAssignment":"",
      "dataType":"integer",
      "description":"The Alarm is enabled but not indicating an alarm state.",
      "idType":"Internal",
      "modeRequirement":"",
      "modelComponent":"",
      "modeldoc":false,
      "modeldoc_id":"",
      "moduleName":"",
      "project":"Car",
      "reqs": ["Car-req-13", "Car-req-14" ],
      "variable_name":"alarm_enabled"
    },
    {
      "_id":"CarCaralarm__NXT",
      "assignment":"",
      "completed":true,
      "component_name":"Car",
      "copilotAssignment":"",
      "dataType":"integer",
      "description":"output scenarios state variable",
      "idType":"Output",
      "modeRequirement":"",
      "modelComponent":"",
      "modeldoc":false,
      "modeldoc_id":"",
      "moduleName":"",
      "project":"Car",
      "reqs": ["Car-req-13", "Car-req-14" ],
      "variable_name":"alarm__NXT"
    },
    {
      "_id":"CarCaralarm_button",
      "assignment":"",
      "completed":true,
      "component_name":"Car",
      "copilotAssignment":"",
      "dataType":"boolean",
      "description":"User button pressed to control the state of the Alarm.",
      "idType":"Input",
      "modeRequirement":"",
      "modelComponent":"",
      "modeldoc":false,
      "modeldoc_id":"",
      "moduleName":"",
      "project":"Car",
      "reqs": ["Car-req-13", "Car-req-14" ],
      "variable_name":"alarm_button"
    },
    {
      "_id":"CarCaralarm_disabled",
      "assignment":"(0)",
      "completed":true,
      "component_name":"Car",
      "copilotAssignment":"",
      "dataType":"integer",
      "description":"The Alarm is disabled and will not generate an alarm even if a trigger event occurs.",
      "idType":"Internal",
      "modeRequirement":"",
      "modelComponent":"",
      "modeldoc":false,
      "modeldoc_id":"",
      "moduleName":"",
      "project":"Car",
      "reqs": ["Car-req-13", "Car-req-14" ],
      "variable_name":"alarm_disabled"
    },
    {
      "_id":"CarCaralarm",
      "assignment":"",
      "completed":true,
      "component_name":"Car",
      "copilotAssignment":"",
      "dataType":"integer",
      "description":"scenarios state variable",
      "idType":"Input",
      "modeRequirement":"",
      "modelComponent":"",
      "modeldoc":false,
      "modeldoc_id":"",
      "moduleName":"",
      "project":"Car",
      "reqs": ["Car-req-13", "Car-req-14" ],
      "variable_name":"alarm"
    },
    {
      "_id":"CarCarbrake_lights",
      "assignment":"",
      "completed":true,
      "component_name":"Car",
      "copilotAssignment":"",
      "dataType":"boolean",
      "description":"Indicators that the car is braking.",
      "idType":"Output",
      "modeRequirement":"",
      "modelComponent":"",
      "modeldoc":false,
      "modeldoc_id":"",
      "moduleName":"",
      "project":"Car",
      "reqs": ["Car-req-9", "Car-req-9-1" ],
      "variable_name":"brake_lights"
    },
    {
      "_id":"CarCarbraking",
      "assignment":"",
      "completed":true,
      "component_name":"Car",
      "copilotAssignment":"",
      "dataType":"boolean",
      "description":"The brakes are applied.",
      "idType":"Input",
      "modeRequirement":"",
      "modelComponent":"",
      "modeldoc":false,
      "modeldoc_id":"",
      "moduleName":"",
      "project":"Car",
      "reqs": ["Car-req-9", "Car-req-9-1" ],
      "variable_name":"braking"
    },
    {
      "_id":"CarCarspeed",
      "assignment":"",
      "completed":true,
      "component_name":"Car",
      "copilotAssignment":"",
      "dataType":"integer",
      "description":"The Car could be moving.",
      "idType":"Input",
      "modeRequirement":"",
      "modelComponent":"",
      "modeldoc":false,
      "modeldoc_id":"",
      "moduleName":"",
      "project":"Car",
      "reqs": ["Car-req-8" ],
      "variable_name":"speed"
    },
    {
      "_id":"CarCarStarting",
      "assignment":"(1)",
      "completed":true,
      "component_name":"Car",
      "copilotAssignment":"",
      "dataType":"integer",
      "description":"The car is being started by the Starter.",
      "idType":"Internal",
      "modeRequirement":"",
      "modelComponent":"",
      "modeldoc":false,
      "modeldoc_id":"",
      "moduleName":"",
      "project":"Car",
      "reqs": ["Car-req-7" ],
      "variable_name":"Starting"
    },
    {
      "_id":"CarCarstarter_state__NXT",
      "assignment":"",
      "completed":true,
      "component_name":"Car",
      "copilotAssignment":"",
      "dataType":"integer",
      "description":"output scenarios state variable",
      "idType":"Output",
      "modeRequirement":"",
      "modelComponent":"",
      "modeldoc":false,
      "modeldoc_id":"",
      "moduleName":"",
      "project":"Car",
      "reqs": ["Car-req-7", "Car-req-8" ],
      "variable_name":"starter_state__NXT"
    },
    {
      "_id":"CarCarOff",
      "assignment":"(2)",
      "completed":true,
      "component_name":"Car",
      "copilotAssignment":"",
      "dataType":"integer",
      "description":"Engine and Starter and all other Car components are off.",
      "idType":"Internal",
      "modeRequirement":"",
      "modelComponent":"",
      "modeldoc":false,
      "modeldoc_id":"",
      "moduleName":"",
      "project":"Car",
      "reqs": ["Car-req-7", "Car-req-8", "Car-req-13" ],
      "variable_name":"Off"
    },
    {
      "_id":"CarCarstarter_state",
      "assignment":"",
      "completed":true,
      "component_name":"Car",
      "copilotAssignment":"",
      "dataType":"integer",
      "description":"scenarios state variable",
      "idType":"Input",
      "modeRequirement":"",
      "modelComponent":"",
      "modeldoc":false,
      "modeldoc_id":"",
      "moduleName":"",
      "project":"Car",
      "reqs": ["Car-req-7", "Car-req-8", "Car-req-13" ],
      "variable_name":"starter_state"
    },
    {
      "_id":"CarCarstart_button",
      "assignment":"",
      "completed":true,
      "component_name":"Car",
      "copilotAssignment":"",
      "dataType":"boolean",
      "description":"The button pushed to start or stop the car.",
      "idType":"Input",
      "modeRequirement":"",
      "modelComponent":"",
      "modeldoc":false,
      "modeldoc_id":"",
      "moduleName":"",
      "project":"Car",
      "reqs": ["Car-req-7", "Car-req-8" ],
      "variable_name":"start_button"
    }
  ]
}
