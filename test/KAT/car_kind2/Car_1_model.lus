--Historically: X has always been true
-- As soon as X is false once, Y will be false forever
-- (falling edge)
node H(X:bool) returns (Y:bool);
let
    Y = X -> (X and (pre Y));
tel


-- Timed Historically: general case
-- True if X has been true, and for R ticks afterwards, false thereafter
-- Always true for at least R ticks of the timeline, even if X is never true
-- L is ignored
node HT( L: int;  R: int; X: bool) returns (Y: bool);
let
  Y = not OT(L, R, not X);
tel


--Timed Once: general case
-- True R ticks after each X first true until L ticks after X is last true
node OT( L: int;  R: int; X: bool) returns (Y: bool);
var  D:bool;
let
  D=delay(X, R);
  Y=OTlore(L-R, D);
tel


node delay(X:bool;  R:int) returns(Y:bool);
var X1, X2, X3, X4, X5, X6, X7, X8, X9, X10 : bool;
let
  Y = if (R=0) then X
      else (if (R=1) then X1
      else (if (R=2) then X2
      else (if (R=3) then X3
      else (if (R=4) then X4
      else (if (R=5) then X5
      else (if (R=6) then X6
      else (if (R=7) then X7
      else (if (R=8) then X8
      else (if (R=9) then X9
      else (if (R=10) then X10
      else false (* n.b. only handles R <= 10 *)
      ))))))))));
  X1 = false -> pre X;
  X2 = false -> pre X1;
  X3 = false -> pre X2;
  X4 = false -> pre X3;
  X5 = false -> pre X4;
  X6 = false -> pre X5;
  X7 = false -> pre X6;
  X8 = false -> pre X7;
  X9 = false -> pre X8;
  X10 = false -> pre X9;
tel


--Timed Once: less than or equal to N
--  True every X and for N ticks afterward
node OTlore( N: int; X: bool) returns (Y: bool);
    var C:int;
let
    C = if X then 0
        else (-1 -> pre C + (if pre C <0 then 0 else 1));

    Y = 0 <= C and C <= N;
tel


-- The equivalent of LTL Z in Lustre.
--   Initially true, then the previous value of X (true, delay X by one)
node ZtoPre(X: bool) returns (Y:bool);
let
  Y = true -> pre X;
tel



type starter_state__T = enum { Started, Starting, Off };
type alarm__T = enum { alarm_disabled, alarm_enabled };

----------------------------------------------------------------------
contract Car_1Spec( braking : bool )
returns ( brake_lights : bool );
let
  
  
  
  (* Req: upon persisted(1, (! braking)) the Car shall immediately satisfy (! brake_lights). *)

  var Braking_1 : bool = H((((HT(1, 0, (not braking)) and HT((1 - 1), 0, (not ZtoPre(false)))) and ZtoPre((not (HT(1, 0, (not braking)) and HT((1 - 1), 0, (not ZtoPre(false))))))) => (not brake_lights)));


  (* Req: upon braking the Car shall immediately satisfy brake_lights. *)

  var Braking : bool = H(((braking and ZtoPre((not braking))) => brake_lights));


  guarantee "Braking-1" Braking_1;
  guarantee "Braking" Braking;
tel

----------------------------------------------------------------------
node Car_1 ( braking : bool )
returns ( brake_lights : bool );
  (*@contract
     import Car_1Spec(braking)
            returns (brake_lights);
  *)
let
  --%MAIN;
    brake_lights = brake_system(braking);
tel

node brake_system (braking : bool) returns (brake_lights : bool);
let
  brake_lights = braking;
tel
